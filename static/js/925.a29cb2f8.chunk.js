(self.webpackChunk_3d_examples=self.webpackChunk_3d_examples||[]).push([[925],{925:function(n,r,t){"use strict";t.r(r),t.d(r,{default:function(){return m}});var e=t(5671),v=t(3144),a=t(136),o=t(4062),s=t(7313),g=t(3562),i=t(2518),c=t(1935),l=t(6853),d=t(6938),h=t(2584),x=t.n(h),f=t(6554),U=t.n(f),y=t(6417),m=function(n){(0,a.Z)(t,n);var r=(0,o.Z)(t);function t(){var n;(0,e.Z)(this,t);for(var v=arguments.length,a=new Array(v),o=0;o<v;o++)a[o]=arguments[o];return(n=r.call.apply(r,[this].concat(a))).initThree=function(){var n={width:window.innerWidth,height:window.innerHeight},r=document.querySelector("canvas.webgl"),t=new g.CP7({canvas:r});t.setSize(n.width,n.height),t.setPixelRatio(Math.min(window.devicePixelRatio,2)),t.toneMapping=THREE.ReinhardToneMapping,t.autoClear=!1;var e=new g.xsS,v=new g.cPb(75,n.width/n.height,.1,100);v.position.set(.25,-.25,1),e.add(v);var a=new i.z(v,t.domElement);a.enableDamping=!0,window.addEventListener("resize",(function(){n.width=window.innerWidth,n.height=window.innerHeight,t.setSize(n.width,n.height),t.setPixelRatio(Math.min(window.devicePixelRatio,2)),v.aspect=n.width/n.height,v.updateProjectionMatrix()}));var o=new g.jyz({side:g.ehD,vertexShader:x(),fragmentShader:U()}),s=new g.Kj0(new g.Wjw(1,64),o);s.scale.set(.5,.5,.5),e.add(s);var h=new d.C(e,v),f=new l.m(new g.FM8(window.innerWidth,window.innerHeight),1.5,.4,.85);f.threshold=0,f.strength=2.2,f.radius=.2;var y=new c.xC(t);y.renderToScreen=!0,y.addPass(h),y.addPass(f);var m=new THREE.AmbientLight(16777215,1.2);e.add(m);!function n(){s&&(s.rotation.y+=.01),s&&(s.rotation.x+=.005),y&&y.render(),a.update(),t.render(e,v),window.requestAnimationFrame(n)}()},n}return(0,v.Z)(t,[{key:"componentDidMount",value:function(){this.initThree()}},{key:"render",value:function(){return(0,y.jsxs)("div",{className:"flag_page",children:[(0,y.jsx)("canvas",{className:"webgl"}),(0,y.jsxs)("a",{className:"github",href:"https://github.com/dragonir/3d",target:"_blank",rel:"noreferrer",children:[(0,y.jsx)("svg",{height:"36","aria-hidden":"true",viewBox:"0 0 16 16",version:"1.1",width:"36","data-view-component":"true",children:(0,y.jsx)("path",{fill:"#FFFFFF",fillRule:"evenodd",d:"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"})}),(0,y.jsx)("span",{className:"author",children:"@dragonir"})]})]})}}]),t}(s.Component)},6554:function(n){n.exports="#define PI 3.1415926535897932384626433832795\r\n\r\nvarying vec2 vUv;\r\n\r\nfloat random(vec2 st) {\r\n  return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\r\n}\r\n\r\nvec2 rotate(vec2 uv, float rotation, vec2 mid) {\r\n  return vec2(\r\n    cos(rotation) * (uv.x - mid.x) + sin(rotation) * (uv.y - mid.y) + mid.x,\r\n    cos(rotation) * (uv.y - mid.y) - sin(rotation) * (uv.x - mid.x) + mid.y\r\n  );\r\n}\r\n\r\n// \u521b\u5efa\u4e8c\u7ef4\u67cf\u6797\u566a\u58f0\r\nvec4 permute(vec4 x) {\r\n  return mod(((x * 34.0) + 1.0) * x, 289.0);\r\n}\r\n\r\nvec2 fade(vec2 t) {\r\n  return t * t * t * (t * (t * 6.0 - 15.0 ) + 10.0);\r\n}\r\n\r\nfloat cnoise(vec2 P) {\r\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\r\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\r\n  Pi = mod(Pi, 289.0);\r\n  vec4 ix = Pi.xzxz;\r\n  vec4 iy = Pi.yyww;\r\n  vec4 fx = Pf.xzxz;\r\n  vec4 fy = Pf.yyww;\r\n  vec4 i = permute(permute(ix) + iy);\r\n  vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0;\r\n  vec4 gy = abs(gx) - 0.5;\r\n  vec4 tx = floor(gx + 0.5);\r\n  gx = gx - tx;\r\n  vec2 g00 = vec2(gx.x,gy.x);\r\n  vec2 g10 = vec2(gx.y,gy.y);\r\n  vec2 g01 = vec2(gx.z,gy.z);\r\n  vec2 g11 = vec2(gx.w,gy.w);\r\n  vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\r\n  g00 *= norm.x;\r\n  g01 *= norm.y;\r\n  g10 *= norm.z;\r\n  g11 *= norm.w;\r\n  float n00 = dot(g00, vec2(fx.x, fy.x));\r\n  float n10 = dot(g10, vec2(fx.y, fy.y));\r\n  float n01 = dot(g01, vec2(fx.z, fy.z));\r\n  float n11 = dot(g11, vec2(fx.w, fy.w));\r\n  vec2 fade_xy = fade(Pf.xy);\r\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\r\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\r\n  return 2.3 * n_xy;\r\n}\r\n\r\nvoid main() {\r\n  // // pattern 1\r\n  // gl_FragColor = vec4(vUv, 1.0, 1.0);\r\n\r\n  // // pattern 2\r\n  // gl_FragColor = vec4(vUv, 0.0, 1.0);\r\n\r\n  // // pattern 3\r\n  // float strength = vUv.x;\r\n  // gl_FragColor = vec4(vec3(strength), 1.0);\r\n  // \u7b49\u4ef7\u4e8e\r\n  // gl_FragColor = vec4(vUv.x, vUv.x, vUv.x, 1.0);\r\n\r\n  // // pattern 4\r\n  // float strength = vUv.y;\r\n  // gl_FragColor = vec4(vec3(strength), 1.0);\r\n\r\n  // // pattern 5\r\n  // float strength = 1.0 - vUv.y;\r\n  // gl_FragColor = vec4(vec3(strength), 1.0);\r\n\r\n  // pattern 6\r\n  // float strength = vUv.y * 10.0;\r\n  // gl_FragColor = vec4(vec3(strength), 1.0);\r\n\r\n  // pattern 7\r\n  // float strength = mod(vUv.y * 10.0, 1.0);\r\n  // gl_FragColor = vec4(vec3(strength), 1.0);\r\n\r\n  // pattern 8\r\n  // float strength = mod(vUv.y * 10.0, 1.0);\r\n  // strength = step(0.5, strength);\r\n  // gl_FragColor = vec4(vec3(strength), 1.0);\r\n\r\n  // pattern 9\r\n  // float strength = mod(vUv.y * 10.0, 1.0);\r\n  // strength = step(0.8, strength);\r\n  // gl_FragColor = vec4(vec3(strength), 1.0);\r\n\r\n  // pattern 10\r\n  // float strength = mod(vUv.x * 10.0, 1.0);\r\n  // strength = step(0.8, strength);\r\n  // gl_FragColor = vec4(vec3(strength), 1.0);\r\n\r\n  // pattern 11\r\n  // float strength = step(0.8, mod(vUv.x * 10.0, 1.0));\r\n  // strength += step(0.8, mod(vUv.y * 10.0, 1.0));\r\n  // strength = clamp(strength, 0.0, 1.0);\r\n  // gl_FragColor = vec4(vec3(strength), 1.0);\r\n\r\n  // pattern 12\r\n  // float strength = step(0.8, mod(vUv.x * 10.0, 1.0));\r\n  // strength *= step(0.8, mod(vUv.y * 10.0, 1.0));\r\n  // gl_FragColor = vec4(vec3(strength), 1.0);\r\n\r\n  // pattern 13\r\n  // float strength = step(0.4, mod(vUv.x * 10.0, 1.0));\r\n  // strength *= step(0.8, mod(vUv.y * 10.0, 1.0));\r\n  // gl_FragColor = vec4(vec3(strength), 1.0);\r\n\r\n  // pattern 14\r\n  // float barX = step(0.4, mod(vUv.x * 10.0, 1.0)) * step(0.8, mod(vUv.y * 10.0, 1.0));\r\n  // float barY = step(0.8, mod(vUv.x * 10.0, 1.0)) * step(0.4, mod(vUv.y * 10.0, 1.0));\r\n  // float strength = barX + barY;\r\n  // strength = clamp(strength, 0.0, 1.0);\r\n  // gl_FragColor = vec4(vec3(strength), 1.0);\r\n\r\n  // // Pattern 15\r\n  // float barX = step(0.4, mod(vUv.x * 10.0 - 0.2, 1.0)) * step(0.8, mod(vUv.y * 10.0, 1.0));\r\n  // float barY = step(0.8, mod(vUv.x * 10.0, 1.0)) * step(0.4, mod(vUv.y * 10.0 - 0.2, 1.0));\r\n  // float strength = barX + barY;\r\n  // strength = clamp(strength, 0.0, 1.0);\r\n\r\n  // // Pattern 16\r\n  // float strength = abs(vUv.x - 0.5);\r\n\r\n  // // Pattern 17\r\n  // float strength = min(abs(vUv.x - 0.5), abs(vUv.y - 0.5));\r\n\r\n  // // Pattern 18\r\n  // float strength = max(abs(vUv.x - 0.5), abs(vUv.y - 0.5));\r\n\r\n  // // Pattern 19\r\n  // float strength = step(0.2, max(abs(vUv.x - 0.5), abs(vUv.y - 0.5)));\r\n\r\n  // // Pattern 20\r\n  // float strength = step(0.2, max(abs(vUv.x - 0.5), abs(vUv.y - 0.5)));\r\n  // strength *= 1.0 - step(0.25, max(abs(vUv.x - 0.5), abs(vUv.y - 0.5)));\r\n\r\n  // // Pattern 21\r\n  // float strength = floor(vUv.x * 10.0) / 10.0;\r\n\r\n  // // Pattern 22\r\n  // float strength = floor(vUv.x * 10.0) / 10.0 * floor(vUv.y * 10.0) / 10.0;\r\n\r\n  // // Pattern 23\r\n  // float strength = random(vUv);\r\n\r\n  // // Pattern 24\r\n  // vec2 gridUv = vec2(floor(vUv.x * 10.0) / 10.0, floor(vUv.y * 10.0) / 10.0);\r\n  // float strength = random(gridUv);\r\n\r\n  // // Pattern 25\r\n  // vec2 gridUv = vec2(floor(vUv.x * 10.0) / 10.0, floor((vUv.y + vUv.x * 0.5) * 10.0) / 10.0);\r\n  // float strength = random(gridUv);\r\n\r\n  // // Pattern 26\r\n  // float strength = length(vUv);\r\n\r\n  // // Pattern 27\r\n  // float strength = distance(vUv, vec2(0.5));\r\n\r\n  // // Pattern 28\r\n  // float strength = 1.0 - distance(vUv, vec2(0.5));\r\n\r\n  // // Pattern 29\r\n  // float strength = 0.015 / (distance(vUv, vec2(0.5)));\r\n\r\n  // // Pattern 30\r\n  // float strength = 0.15 / (distance(vec2(vUv.x, (vUv.y - 0.5) * 5.0 + 0.5), vec2(0.5)));\r\n\r\n  // // Pattern 31\r\n  // float strength = 0.15 / (distance(vec2(vUv.x, (vUv.y - 0.5) * 5.0 + 0.5), vec2(0.5)));\r\n  // strength *= 0.15 / (distance(vec2(vUv.y, (vUv.x - 0.5) * 5.0 + 0.5), vec2(0.5)));\r\n\r\n  // // Pattern 32\r\n  // vec2 rotatedUv = rotate(vUv, PI * 0.25, vec2(0.5));\r\n  // float strength = 0.15 / (distance(vec2(rotatedUv.x, (rotatedUv.y - 0.5) * 5.0 + 0.5), vec2(0.5)));\r\n  // strength *= 0.15 / (distance(vec2(rotatedUv.y, (rotatedUv.x - 0.5) * 5.0 + 0.5), vec2(0.5)));\r\n\r\n  // // Pattern 33\r\n  // float strength = step(0.5, distance(vUv, vec2(0.5)) + 0.25);\r\n\r\n  // // Pattern 34\r\n  // float strength = abs(distance(vUv, vec2(0.5)) - 0.25);\r\n\r\n  // // Pattern 35\r\n  // float strength = step(0.01, abs(distance(vUv, vec2(0.5)) - 0.25));\r\n\r\n  // // Pattern 36\r\n  // float strength = 1.0 - step(0.01, abs(distance(vUv, vec2(0.5)) - 0.25));\r\n\r\n  // // Pattern 37\r\n  // vec2 wavedUv = vec2(\r\n  //     vUv.x,\r\n  //     vUv.y + sin(vUv.x * 30.0) * 0.1\r\n  // );\r\n  // float strength = 1.0 - step(0.01, abs(distance(wavedUv, vec2(0.5)) - 0.25));\r\n\r\n  // // Pattern 38\r\n  // vec2 wavedUv = vec2(\r\n  //     vUv.x + sin(vUv.y * 30.0) * 0.1,\r\n  //     vUv.y + sin(vUv.x * 30.0) * 0.1\r\n  // );\r\n  // float strength = 1.0 - step(0.01, abs(distance(wavedUv, vec2(0.5)) - 0.25));\r\n\r\n  // // Pattern 39\r\n  // vec2 wavedUv = vec2(\r\n  //     vUv.x + sin(vUv.y * 100.0) * 0.1,\r\n  //     vUv.y + sin(vUv.x * 100.0) * 0.1\r\n  // );\r\n  // float strength = 1.0 - step(0.01, abs(distance(wavedUv, vec2(0.5)) - 0.25));\r\n\r\n  // // Pattern 40\r\n  // float angle = atan(vUv.x, vUv.y);\r\n  // float strength = angle;\r\n\r\n  // // Pattern 41\r\n  // float angle = atan(vUv.x - 0.5, vUv.y - 0.5);\r\n  // float strength = angle;\r\n\r\n  // // Pattern 42\r\n  // float angle = atan(vUv.x - 0.5, vUv.y - 0.5) / (PI * 2.0) + 0.5;\r\n  // float strength = angle;\r\n\r\n  // // Pattern 43\r\n  // float angle = atan(vUv.x - 0.5, vUv.y - 0.5) / (PI * 2.0) + 0.5;\r\n  // float strength = mod(angle * 20.0, 1.0);\r\n\r\n  // // Pattern 44\r\n  // float angle = atan(vUv.x - 0.5, vUv.y - 0.5) / (PI * 2.0) + 0.5;\r\n  // float strength = sin(angle * 100.0);\r\n\r\n  // // Pattern 45\r\n  // float angle = atan(vUv.x - 0.5, vUv.y - 0.5) / (PI * 2.0) + 0.5;\r\n  // float radius = 0.25 + sin(angle * 100.0) * 0.02;\r\n  // float strength = 1.0 - step(0.01, abs(distance(vUv, vec2(0.5)) - radius));\r\n\r\n  // // Pattern 46\r\n  // float strength = cnoise(vUv * 10.0);\r\n\r\n  // // Pattern 47\r\n  // float strength = step(0.0, cnoise(vUv * 10.0));\r\n\r\n  // // Pattern 48\r\n  // float strength = 1.0 - abs(cnoise(vUv * 10.0));\r\n\r\n  // // Pattern 49\r\n  // float strength = sin(cnoise(vUv * 10.0) * 20.0);\r\n\r\n  // Pattern 50\r\n  float strength = step(0.8, sin(cnoise(vUv * 10.0) * 20.0));\r\n\r\n  // Final color\r\n  vec3 blackColor = vec3(0.0);\r\n  vec3 uvColor = vec3(vUv, 0.2);\r\n  vec3 mixedColor = mix(blackColor, uvColor, strength);\r\n\r\n  // gl_FragColor = vec4(vec3(strength), 1.0);\r\n  gl_FragColor = vec4(mixedColor, 1.0);\r\n\r\n}"},2584:function(n){n.exports="varying vec2 vUv;\r\n\r\nvoid main() {\r\n  gl_Position =projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n  vUv = uv;\r\n}"}}]);